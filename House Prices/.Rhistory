ctrl = trainControl(method = "cv", number = 3)
variable_to_rm_cor = cor_summary[cor_summary$abs_cor<=0.1 & cor_summary$Var1!="Id",]$Var1
variable_to_rm_cor
all = fixedAll[,!(names(fixedAll) %in% variable_to_rm_cor) & !(names(fixedAll) %in% variable_to_rm_aov)]
str(all)
ctrl = trainControl(method = "cv", number = 3)
names(fixedAll)
system.time(
house_rpart <- train(SalePrice ~.-Id, data=house_trn,
method="rpart", trControl = ctrl, metric="RMSE")
)
system.time(
house_rpart <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="rpart", trControl = ctrl, metric="RMSE")
)
colSums(is.na(fixedAll))
colSums(is.na(fixedAll[fixedAll$Id<=1460,]))
system.time(
all_rpart <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="rpart", trControl = ctrl, metric="RMSE")
)
all_rpart
system.time(
all_rpart <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="rpart", trControl = ctrl, metric="RMSE")
)
all_rpart
ctrl = trainControl(method = "cv", number = 5)
# CART
system.time(
all_rpart <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="rpart", trControl = ctrl, metric="RMSE")
)
all_rpart
ctrl = trainControl(method = "cv", number = 5)
# CART
system.time(
all_rpart <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="rpart", trControl = ctrl, metric="RMSE",tuneLength=10)
)
all_rpart
varImp(all_rpart)
var_imp_rpart = as.data.frame(as.table(varImp(all_rpart)))
var_imp_rpart = data.frame(varImp(all_rpart))
varImp(all_rpart)
system.time(
all_rf <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="rf", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
var_imp_rpart = varImp(all_rpart)
var_imp_rpart = data.frame(importance = var_imp_rpart$importance)
View(var_imp_rpart)
all_rf
var_imp_rf = varImp(all_rf)
varImp(all_rf)
all_rf
varImp(all_rf)
varImp(all_rpart)
all_rf
var_imp_rf = varImp(all_rf)
all_rf
system.time(
all_gbm <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="gbm", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_gbm
var_imp_gbm = varImp(all_gbm)
var_imp_gbm = data.frame(importance = var_imp_gbm$importance)
View(var_imp_gbm)
system.time(
all_knn <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="knn", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_knn
var_imp_knn = varImp(all_knn)
var_imp_knn = data.frame(importance = var_imp_knn$importance)
View(var_imp_knn)
system.time(
all_knn <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="knn", trControl = ctrl, metric="RMSE",
tuneLength=10)
)
all_knn
all_rf
system.time(
all_nnet <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="nnet", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_nnet
var_imp_nnet = varImp(all_nnet)
var_imp_nnet = data.frame(importance = var_imp_nnet$importance)
View(var_imp_nnet)
system.time(
all_svm <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="svmLinear", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_svm
var_imp_svm = varImp(all_svm)
var_imp_svm = data.frame(importance = var_imp_svm$importance)
all_rf
rf_grid = expand.grid(mtry=c(30,50,70,90))
system.time(
all_rf <- train(SalePrice ~.-Id, data=fixedAll[fixedAll$Id<=1460,],
method="rf", trControl = ctrl, metric="RMSE",
tuneGrid = rf_grid)
)
all_rf
var_imp_rf = varImp(all_rf)
ctrl = trainControl(method = "cv", number = 5)
# CART
system.time(
all_rpart <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="rpart", trControl = ctrl, metric="RMSE",tuneLength=10)
)
all_rpart
var_imp_rpart = varImp(all_rpart)
var_imp_rpart = data.frame(importance = var_imp_rpart$importance)
var_imp_rpart$percent = var_imp_rpart$importance / sum(var_imp_rpart$importance)
var_imp_rpart = var_imp_rpart[order(var_imp_rpart$percent,descending=T),]
# Random Forest
rf_grid = expand.grid(mtry=c(30,50,70,90))
system.time(
all_rf <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="rf", trControl = ctrl, metric="RMSE",
tuneGrid = rf_grid)
)
all_rf
var_imp_rf = varImp(all_rf)
var_imp_rf = data.frame(importance = var_imp_rf$importance)
var_imp_rf$percent = var_imp_rf$importance / sum(var_imp_rf$importance)
var_imp_rf = var_imp_rf[order(var_imp_rf$percent,descending=T),]
# GBM
system.time(
all_gbm <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="gbm", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_gbm
var_imp_gbm = varImp(all_gbm)
var_imp_gbm = data.frame(importance = var_imp_gbm$importance)
var_imp_gbm$percent = var_imp_gbm$importance / sum(var_imp_gbm$importance)
var_imp_gbm = var_imp_gbm[order(var_imp_gbm$percent,descending=T),]
# KNN
system.time(
all_knn <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="knn", trControl = ctrl, metric="RMSE",
tuneLength=10)
)
all_knn
var_imp_knn = varImp(all_knn)
var_imp_knn = data.frame(importance = var_imp_knn$importance)
var_imp_knn$percent = var_imp_knn$importance / sum(var_imp_knn$importance)
var_imp_knn = var_imp_knn[order(var_imp_knn$percent,descending=T),]
# NNET
system.time(
all_nnet <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="nnet", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_nnet
var_imp_nnet = varImp(all_nnet)
var_imp_nnet = data.frame(importance = var_imp_nnet$importance)
var_imp_nnet$percent = var_imp_nnet$importance / sum(var_imp_nnet$importance)
var_imp_nnet = var_imp_nnet[order(var_imp_nnet$percent,descending=T),]
# SVM
system.time(
all_svm <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="svmLinear", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_svm
var_imp_svm = varImp(all_svm)
var_imp_svm = data.frame(importance = var_imp_svm$importance)
var_imp_svm$percent = var_imp_svm$importance / sum(var_imp_svm$importance)
var_imp_svm = var_imp_svm[order(var_imp_svm$percent,descending=T),]
sum(var_imp_svm$importance)
View(var_imp_svm)
var_imp_svm$percent = var_imp_svm$Overall / sum(var_imp_svm$Overall)
var_imp_svm = var_imp_svm[order(var_imp_svm$percent,descending=T),]
var_imp_svm = var_imp_svm[order(var_imp_svm$percent,decreasing = T),]
View(var_imp_svm)
var_imp_nnet = var_imp_nnet[order(var_imp_nnet$percent,decreasing = T),]
var_imp_nnet$percent = var_imp_nnet$Overall / sum(var_imp_nnet$Overall)
var_imp_nnet = var_imp_nnet[order(var_imp_nnet$percent,decreasing = T),]
var_imp_knn$percent = var_imp_knn$Overall / sum(var_imp_knn$Overall)
var_imp_knn = var_imp_knn[order(var_imp_knn$percent,decreasing = T),]
var_imp_gbm$percent = var_imp_gbm$Overall / sum(var_imp_gbm$Overall)
var_imp_gbm = var_imp_gbm[order(var_imp_gbm$percent,decreasing = T),]
all_rf
var_imp_rf = data.frame(importance = var_imp_rf$importance)
var_imp_rf = varImp(all_rf)
varImpPlot(all_rf)
var_imp_rf = varImpPlot(all_rf$finalModel)
var_imp_rf = varImp(all_rf$finalModel)
all_rf
varImpPlot(all_rf$finalModel)
var_imp_rf = importance(all_rf$finalModel)
var_imp_rf = data.frame(importance(all_rf$finalModel))
View(var_imp_rf)
var_imp_rf$percent = var_imp_rf$IncNodePurity / sum(var_imp_rf$IncNodePurity)
var_imp_rf = var_imp_rf[order(var_imp_rf$percent,decreasing = T),]
all_rpart
all_rf
all_gbm
all_knn
all_nnet
all_svm
View(var_imp_gbm)
intersect(row.names(var_imp_gbm[c(1:30),]),row.names(var_imp_rf[c(1:30),]))
intersect(row.names(var_imp_gbm[c(1:30),]),row.names(var_imp_rf[c(1:30),]),row.names(var_imp_nnet[c(1:30),]))
rf_top = row.names(var_imp_rf[c(1:20),])
rpart_top = row.names(var_imp_rpart[c(1:20),])
gbm_top = row.names(var_imp_gbm[c(1:20),])
nnet_top = row.names(var_imp_nnet[c(1:20),])
top_predictor = union(rf_top,rpart_top)
top_predictor = union(rf_top,rpart_top,gbm_top,nnet_top)
top_predictor = union(top_predictor,gbm_top)
top_predictor = union(top_predictor,gbm_top,nnet_top)
nnet_top = row.names(var_imp_nnet[c(1:20),])
top_predictor = union(top_predictor,nnet_top)
top_predictor = union(rf_top,rpart_top)
top_predictor = union(top_predictor,gbm_top)
top_predictor_2 = union(knn_top,svm_top)
knn_top = row.names(var_imp_knn[c(1:20),])
svm_top = row.names(var_imp_svm[c(1:20),])
top_predictor_2 = union(knn_top,svm_top)
top_predictor_final = union(top_predictor,top_predictor_2)
top_predictor_final
top_predictor_final = c(top_predictor_final,"CentralAir","Neighborhood","SaleType")
# Random Forest
rf_grid = expand.grid(mtry=c(20,35,50,65,80,100))
system.time(
all_rf <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="rf", trControl = ctrl, metric="RMSE",
tuneGrid = rf_grid)
)
all_rf
# Predict on the test set
rf_pred = predict(all_rf,newdata=all[all$Id>1460,],type="raw")
submission = data.frame(Id = all[all$Id>1460,]$Id,
SalePrice = rf_pred)
write.csv(submission,"submission_rf_0407.csv",row.names=F)
# GBM
system.time(
all_gbm <- train(SalePrice ~.-Id, data=all[all$Id<=1460,],
method="gbm", trControl = ctrl, metric="RMSE",
tuneLength=10)
)
all_gbm
gbm_pred = predict(all_gbm,newdata=all[all$Id>1460,],type="raw")
submission = data.frame(Id = all[all$Id>1460,]$Id,
SalePrice = gbm_pred)
write.csv(submission,"submission_gbm_0407.csv",row.names=F)
all_rf
1345.12-290*4
185.12/4
str(all)
dmy <- dummyVars(SalesPrice~.,data=all)
dmy <- dummyVars(SalePrice~.,data=all)
all_dmy <- predict(dmy, newdata=all)
class(all_dmy)
sqrt(718074)
all_dmy <- as.data.frame(all_dmy)
dmy <- dummyVars(" ~ .",data=all)
all_dmy <- predict(dmy, newdata=all)
all_dmy <- as.data.frame(all_dmy)
?xgboost
library(xgboost)
library(xgboost)
?xgboost
xgb <- xgboost(data = data.matrix(all_dmy[all_dmy$Id<=1460,-c("Id","SalePrice")]),
label = all_dmy[all_dmy$Id<=1460,]$SalePrice,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "reg:linear"
)
xgb <- xgboost(data = data.matrix(all_dmy[all_dmy$Id<=1460,!(names(all_dmy) %in% c("Id","SalePrice"))]),
label = all_dmy[all_dmy$Id<=1460,]$SalePrice,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "reg:linear"
)
xgb <- xgboost(data = data.matrix(all_dmy[all_dmy$Id<=1460,!(names(all_dmy) %in% c("Id","SalePrice"))]),
label = all_dmy[all_dmy$Id<=1460,]$SalePrice,
eta = 0.1,
max_depth = 15,
nround=100,
objective = "reg:linear"
)
xgb <- xgboost(data = data.matrix(all_dmy[all_dmy$Id<=1460,!(names(all_dmy) %in% c("Id","SalePrice"))]),
label = all_dmy[all_dmy$Id<=1460,]$SalePrice,
eta = 0.05,
max_depth = 15,
nround=200,
objective = "reg:linear"
)
xgb_cv <- xgb.cv(data = data.matrix(all_dmy[all_dmy$Id<=1460,!(names(all_dmy) %in% c("Id","SalePrice"))]),
label = all_dmy[all_dmy$Id<=1460,]$SalePrice,
eta = 0.05,
max_depth = 15,
nround=200,
objective = "reg:linear",
nfold = 5
)
xgb
summary(xgb)
y_pred <- predict(xgb, all_gbm,newdata=all[all$Id>1460,])
y_pred <- predict(xgb, newdata=all[all$Id>1460,])
y_pred <- predict(xgb, newdata=all_dmy[all_dmy$Id>1460,])
y_pred <- predict(xgb, newdata=data.matrix(all_dmy[all_dmy$Id>1460,]))
y_pred <- predict(xgb, newdata=data.matrix(all_dmy[all_dmy$Id>1460,!(names(all_dmy) %in% c("SalePrice"))]))
mean(y_pred)
xgb_pred <- as.data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = y_pred)
xgb_pred <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = y_pred)
write.csv(xgb_pred,"submission_xgb_0410.csv",row.names = F)
system.time(
all_xgb <- train(SalePrice ~.-Id, data=all_dmy[all_dmy$Id<=1460,],
method="xgbTree", trControl = ctrl, metric="RMSE",
tuneLength=5)
)
all_xgb
xgb_pred = predict(all_xgb,newdata=all_dmy[all_dmy$Id>1460,],type="raw")
xgb_pred <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = all_xgb$pred)
xgb_pred <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = xgb_pred)
write.csv(xgb_pred,"submission_xgb_0410.csv",row.names = F)
View(xgb_pred)
xgb_tune <-  expand.grid(nrounds=800,
max_depth=10,
eta=0.1,
gamma=0,
colsample_bytree=0.6)
system.time(
all_xgb <- train(SalePrice ~.-Id, data=all_dmy[all_dmy$Id<=1460,],
method="xgbTree", trControl = ctrl, metric="RMSE",
tuneGrid = xgb_tune)
)
xgb_tune <-  expand.grid(nrounds=800,
max_depth=10,
eta=0.1,
gamma=0,
colsample_bytree=0.6,
min_child_weight = 1)
system.time(
all_xgb <- train(SalePrice ~.-Id, data=all_dmy[all_dmy$Id<=1460,],
method="xgbTree", trControl = ctrl, metric="RMSE",
tuneGrid = xgb_tune)
)
all_xgb
xgb_pred = predict(all_xgb,newdata=all_dmy[all_dmy$Id>1460,],type="raw")
xgb_pred <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = xgb_pred)
write.csv(xgb_pred,"submission_xgb_0410_2.csv",row.names = F)
rf_pred_orig = predict(all_rf,newdata=all[all$Id<=1460,],type="raw")
gbm_pred_orig = predict(all_gbm,newdata=all[all$Id<=1460,],type="raw")
xgb_pred_orig = predict(all_xgb,newdata=all_dmy[all_dmy$Id<=1460,],type="raw")
all_stack = data.frame(
rf_pred = rf_pred_orig,
gbm_pred = gbm_pred_orig,
xgb_pred = xgb_pred_orig
)
View(all_stack)
all_stack <- all_stack %>%
mutate(rf_rank = rank(rf_pred),
gbm_rank = rank(gbm_pred),
xgb_rank = rank(xgb_pred))
View(all_stack)
?rank
all_stack <- all_stack %>%
mutate(rf_rank = rank(rf_pred,ties.method = "first"),
gbm_rank = rank(gbm_pred,ties.method = "first"),
xgb_rank = rank(xgb_pred,ties.method = "first"))
View(all_stack)
all_stack <- all_stack %>%
mutate(
SalePrice <- all[all$Id<=1460,]$SalePrice
)
system.time(
all_nnet <- train(SalePrice ~., data=all_stack,
method="nnet", trControl = ctrl, metric="RMSE", tuneLength=5)
)
all_stack <- all_stack %>%
mutate(
SalePrice <- all[all$Id<=1460,]$SalePrice
)
View(all_stack)
all_stack$SalePrice <- all[all$Id<=1460,]$SalePrice
View(all_stack)
# NNET
system.time(
all_nnet <- train(SalePrice ~., data=all_stack,
method="nnet", trControl = ctrl, metric="RMSE", tuneLength=5)
)
all_nnet
varImp(all_nnet)
all_stack_pred <- data.frame(
rf_pred = rf_pred,
gbm_pred = gbm_pred,
xgb_pred = xgb_pred
)
View(all_stack_pred)
xgb_pred = predict(all_xgb,newdata=all_dmy[all_dmy$Id>1460,],type="raw")
all_stack_pred <- data.frame(
rf_pred = rf_pred,
gbm_pred = gbm_pred,
xgb_pred = xgb_pred
)
all_stack_pred <- all_stack_pred %>%
mutate(rf_rank = rank(rf_pred,ties.method = "first"),
gbm_rank = rank(gbm_pred,ties.method = "first"),
xgb_rank = rank(xgb_pred,ties.method = "first"))
stack_pred = predict(all_nnet,newdata=all_stack_pred,type="raw")
stack_submission <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = stack_pred)
write.csv(stack_pred,"submission_stacking_0410.csv",row.names = F)
View(stack_submission)
stack_pred = predict(all_nnet,newdata=all_stack_pred,type="raw")
system.time(
all_stack <- train(SalePrice ~., data=all_stack,
method="gbm", trControl = ctrl, metric="RMSE", tuneLength=5)
)
all_gbm
varImp(all_nnet)
# Prepare predicted dataset
all_stack_pred <- data.frame(
rf_pred = rf_pred,
gbm_pred = gbm_pred,
xgb_pred = xgb_pred
)
all_stack_pred <- all_stack_pred %>%
mutate(rf_rank = rank(rf_pred,ties.method = "first"),
gbm_rank = rank(gbm_pred,ties.method = "first"),
xgb_rank = rank(xgb_pred,ties.method = "first"))
stack_pred = predict(all_nnet,newdata=all_stack_pred,type="raw")
stack_submission <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = stack_pred)
write.csv(stack_pred,"submission_stacking_0410.csv",row.names = F)
View(stack_submission)
stack_pred = predict(all_stack,newdata=all_stack_pred,type="raw")
stack_submission <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = stack_pred)
write.csv(stack_pred,"submission_stacking_0410.csv",row.names = F)
View(stack_submission)
View(stack_submission)
write.csv(stack_submission,"submission_stacking_0410.csv",row.names = F)
xgb_tune <-  expand.grid(nrounds=100,
max_depth=10,
eta=0.1,
gamma=0,
colsample_bytree=0.6,
min_child_weight = 1)
system.time(
all_xgb <- train(SalePrice ~.-Id, data=all_dmy[all_dmy$Id<=1460,],
method="xgbTree", trControl = ctrl, metric="RMSE",
tuneGrid = xgb_tune)
)
all_xgb
xgb_pred = predict(all_xgb,newdata=all_dmy[all_dmy$Id>1460,],type="raw")
xgb_submission <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = xgb_pred)
write.csv(xgb_pred,"submission_xgb_0410_3.csv",row.names = F)
all_xgb
write.csv(xgb_submission,"submission_xgb_0410_3.csv",row.names = F)
###################### Model Stacking using NNet ##########################
rf_pred_orig = predict(all_rf,newdata=all[all$Id<=1460,],type="raw")
gbm_pred_orig = predict(all_gbm,newdata=all[all$Id<=1460,],type="raw")
xgb_pred_orig = predict(all_xgb,newdata=all_dmy[all_dmy$Id<=1460,],type="raw")
all_stack = data.frame(
rf_pred = rf_pred_orig,
gbm_pred = gbm_pred_orig,
xgb_pred = xgb_pred_orig
)
all_stack <- all_stack %>%
mutate(rf_rank = rank(rf_pred,ties.method = "first"),
gbm_rank = rank(gbm_pred,ties.method = "first"),
xgb_rank = rank(xgb_pred,ties.method = "first"))
# Add response variable
all_stack$SalePrice <- all[all$Id<=1460,]$SalePrice
View(all_stack)
# GBM
system.time(
all_stack <- train(SalePrice ~., data=all_stack,
method="gbm", trControl = ctrl, metric="RMSE", tuneLength=5)
)
all_gbm
varImp(all_nnet)
varImp(all_gbm)
varImp(all_stack)
all_stack
all_stack_pred <- data.frame(
rf_pred = rf_pred,
gbm_pred = gbm_pred,
xgb_pred = xgb_pred
)
all_stack_pred <- all_stack_pred %>%
mutate(rf_rank = rank(rf_pred,ties.method = "first"),
gbm_rank = rank(gbm_pred,ties.method = "first"),
xgb_rank = rank(xgb_pred,ties.method = "first"))
stack_pred = predict(all_stack,newdata=all_stack_pred,type="raw")
stack_submission <- data.frame(Id = all_dmy[all_dmy$Id>1460,]$Id,
SalePrice = stack_pred)
write.csv(stack_submission,"submission_stacking_0410_2.csv",row.names = F)
