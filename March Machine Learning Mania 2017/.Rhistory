Tournament_modeling = read.csv("Intermediate Data/Modeling_tournament_0219.csv")
Tournament_modeling$Result_num = ifelse(Tournament_modeling$Result=="Win",1,0)
Tournament_modeling = Tournament_modeling[,names(Tournament_modeling) %in% mod_varImp_list |
names(Tournament_modeling) %in% c("Result","Result_num","Season")]
# Separate training and testing datasets
Tournament_allvars_trn = Tournament_modeling[Tournament_modeling$Season<2013,]
Tournament_allvars_val = Tournament_modeling[Tournament_modeling$Season>=2013,]
Tournament_allvars_trn = subset(Tournament_allvars_trn,
select=-c(Result,Season))
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
View(Tournament_allvars_trn)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-41]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
xgb
?recode
summary(xgb)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
summary(xgb)
xgb
Tournament_allvars_val = subset(Tournament_allvars_val,
select=-c(Result,Season))
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
y_pred
?xgboost
data.matrix(Tournament_allvars_val[,-39]
data.matrix(Tournament_allvars_val[,-39])
test = data.matrix(Tournament_allvars_val[,-39])
View(test)
length(y_pred)
3126/268
3216/268
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
#              num_class = 12,
nthread = 3
)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 1,
nthread = 3
)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 2,
nthread = 3
)
xgb
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
length(y_pred)
y_pred
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=25,
objective = "binary:logistic"
)
xgb
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=25,
objective = "binary:logistic",
nfold = 5
)
xgb
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.05,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.15,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb
confusionMatrix(Tournament_allvars_val$Result_num,y_pred,positive="1")
confusionMatrix(Tournament_allvars_val$Result_num,y_pred,positive=1)
Tournament_pred = prediction(y_pred,Tournament_allvars_val$Result_num)
Tournament_roc = performance(Tournament_pred,measure="tpr",x.measure="fpr")
plot(Tournament_roc,main="ROC Curve",lwd=3,col="light blue")
abline(0,1,lty=2,col="red")
Tournament_auc = performance(Tournament_pred,measure="auc")
unlist(Tournament_auc@y.values) # 0.
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 20,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 10,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb
summary(xgb)
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
Tournament_pred = prediction(y_pred,Tournament_allvars_val$Result_num)
Tournament_roc = performance(Tournament_pred,measure="tpr",x.measure="fpr")
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=40,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=40,
objective = "binary:logistic",
nfold = 5
)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
Tournament_pred = prediction(y_pred,Tournament_allvars_val$Result_num)
Tournament_roc = performance(Tournament_pred,measure="tpr",x.measure="fpr")
plot(Tournament_roc,main="ROC Curve",lwd=3,col="light blue")
abline(0,1,lty=2,col="red")
Tournament_auc = performance(Tournament_pred,measure="auc")
unlist(Tournament_auc@y.values) # 0.749
Tournament_allvars_final = subset(Tournament_modeling,
select=-c(Season,Result))
xgb <- xgboost(data = data.matrix(Tournament_allvars_final[,-39]),
label = Tournament_allvars_final$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_final[,-39]),
label = Tournament_allvars_final$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
Test_Full_0303 = read.csv("Intermediate Data/Test_Full_0303.csv")
Test_Full_0303 = read.csv("Intermediate Data/Test_Full_0219.csv.csv")
Test_Full_0303 = read.csv("Intermediate Data/Test_Full_0219.csv")
Test_Top_0303 = Test_Full_0303[,names(Test_Full_0303) %in% names(Tournament_allvars_trn)]
rf_pred = predict(mod_rf,newdata=Test_Top_0303,type="prob")
xgb_pred = predict(xgb,newdata=Test_Top_0303)
xgb_pred = predict(xgb,Test_Top_0303)
View(Test_Top_0303)
xgb_pred = predict(xgb,newdata = data.matrix(Test_Top_0303))
Pred_Tournament_Top_0303 = data.frame(id=Test_Full_0303$id,pred=xgb_pred)
write.csv(Pred_Tournament_Top_0303,"Pred_Tournament_Top_0303_xgb.csv",row.names = F)
log(0.07)
log(-0.07)
log(0.07)
log(0.9)
log(0.69)
log(0.67)
log(0.62)
log(0.6)
log(0.61)
mean(xgb_pred)
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
library(car)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb
summary(xgb)
# predict values in test set
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
mean(y_pred)
y_pred_class <- ifelse(y_pred>0.5,1,0)
confusionMatrix(y_pred_class,Tournament_allvars_val$Result_num,positive="1")
install.packages("PlayerRatings")
library(PlayerRatings)
mod_varImp_list = c(
"Seed_Diff",
"Seed_num_Team1",
"Score_avg_diff_diff",
"Win_score_diff",
"Score_avg_diff_Team1",
"Winning_percent_diff",
"Games_won_Team1",
"Seed_num_Team2",
"Game_score_diff",
"Score_to_Poss_diff",
"OE_diff",
"Winning_percent_Team1",
"Seed_Pre_Team1",
"EFF_diff",
"Away_won_prob_diff",
"D_to_PF_diff",
"Score_avg_diff_Team2",
"AST_to_TO_diff",
"BLK_to_PF_diff",
"Home_won_prob_diff",
"D_to_PF_avg_Team1",
"Score_to_Poss_avg_Team2",
"PF_avg_Team1",
"STL_to_TO_diff",
"TR_avg_diff_Team2",
"FGP3_opp_diff",
"FGP3_opp_Team1",
"FTA_to_FGA_diff",
"Win_close_diff",
"AST_to_SCORE_Team1",
"AST_to_SCORE_diff",
"FTP_Team2",
"FTP_diff_diff",
"OR_opp_diff",
"FTP_diff",
"PF_opp_diff",
"AST_to_SCORE_Team2",
"Winning_percent_close_Team2"
)
Tournament_modeling = read.csv("Intermediate Data/Modeling_tournament_0219.csv")
Tournament_modeling = Tournament_modeling[,names(Tournament_modeling) %in% mod_varImp_list |
names(Tournament_modeling) %in% c("Result","Result_num","Season")]
Tournament_modeling = read.csv("Intermediate Data/Modeling_tournament_0219.csv")
names(Tournament_modeling)
View(Tournament_modeling)
Tournament_modeling$Result_num = ifelse(Tournament_modeling$Result=="Win",1,0)
Elo = select(Tournament_modeling,c("Daynum","ID_SeasonTeam1","ID_SeasonTeam2","Result_num"))
Elo = Tournament_modeling[,names(Tournament_modeling) %in% c("Daynum","ID_SeasonTeam1","ID_SeasonTeam2","Result_num")]
?Elo
?elo
Elo_all = elo(Elo)
str(Elo)
Elo$ID_SeasonTeam2 = as.character(Elo$ID_SeasonTeam2)
Elo_all = elo(Elo)
Elo$ID_SeasonTeam1 = as.character(Elo$ID_SeasonTeam1)
Elo$ID_SeasonTeam2 = as.character(Elo$ID_SeasonTeam2)
Elo_all = elo(Elo)
Elo_all
unique(Elo$ID_SeasonTeam1)
Regular = read.csv("Raw Data/RegularSeasonCompactResults.csv")
View(Regular)
Regular = read.csv("Raw Data/RegularSeasonDetailedResults.csv")
View(Regular)
Regular$ID_SeasonTeam1 = paste(Regular$Season,"_",Regular$Team1,sep="")
Regular$ID_SeasonTeam2 = paste(Regular$Season,"_",Regular$Team2,sep="")
Elo = Tournament_modeling[,names(Tournament_modeling) %in% c("Daynum","ID_SeasonTeam1","ID_SeasonTeam2","Result_num")]
Elo$ID_SeasonTeam1 = as.character(Elo$ID_SeasonTeam1)
Elo$ID_SeasonTeam2 = as.character(Elo$ID_SeasonTeam2)
Elo_all = elo(Elo)
Elo_all
Elo = Regular[,names(Regular) %in% c("Daynum","ID_SeasonTeam1","ID_SeasonTeam2","Result_num")]
Regular$ID_SeasonTeam1 = paste(Regular$Season,"_",Regular$Wteam,sep="")
Regular$ID_SeasonTeam2 = paste(Regular$Season,"_",Regular$Lteam,sep="")
Regular$Result_num = 1
Elo = Regular[,names(Regular) %in% c("Daynum","ID_SeasonTeam1","ID_SeasonTeam2","Result_num")]
Elo$ID_SeasonTeam1 = as.character(Elo$ID_SeasonTeam1)
Elo$ID_SeasonTeam2 = as.character(Elo$ID_SeasonTeam2)
Elo_all = elo(Elo)
Elo_all
Elo_all = as.data.frame(Elo_all)
class(Elo_all)
Elo_all = as.data.frame(Elo_all$ratings)
Elo_all$Win_percent = Elo_all$Win/Elo_all$Games
cor(Elo_all$Win_percent,Elo_all$Rating)
write.csv(Elo_all,"Elo_rating_0303.csv")
Tournament_modeling = read.csv("Intermediate Data/Modeling_tournament_0219.csv")
Tournament_modeling$Result_num = ifelse(Tournament_modeling$Result=="Win",1,0)
View(Elo_all)
names(Tournament_modeling)
View(Elo_all)
Tournament_modeling = merge(Tournament_modeling,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Tournament_modeling = merge(Tournament_modeling,Elo_all,by.x="ID_SeasonTeam2",by.y="Player",all.x=T)
View(Tournament_modeling)
names(Tournament_modeling)
Tournament_modeling = Tournament_modeling[,names(Tournament_modeling) %in% mod_varImp_list |
names(Tournament_modeling) %in% c("Result","Result_num","Season",
"Rating.x","Rating.y")]
View(Tournament_modeling)
Tournament_modeling$Rating_diff = Tournament_modeling$Rating.x - Tournament_modeling$Rating.y
Tournament_allvars_trn = Tournament_modeling[Tournament_modeling$Season<2013,]
Tournament_allvars_val = Tournament_modeling[Tournament_modeling$Season>=2013,]
Tournament_allvars_trn = subset(Tournament_allvars_trn,
select=-c(Result,Season))
Tournament_allvars_val = subset(Tournament_allvars_val,
select=-c(Result,Season))
View(Tournament_allvars_trn)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb
summary(xgb)
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
mean(y_pred)
y_pred_class <- ifelse(y_pred>0.5,1,0)
confusionMatrix(y_pred_class,Tournament_allvars_val$Result_num,positive="1")
Tournament_pred = prediction(y_pred,Tournament_allvars_val$Result_num)
Tournament_roc = performance(Tournament_pred,measure="tpr",x.measure="fpr")
plot(Tournament_roc,main="ROC Curve",lwd=3,col="light blue")
abline(0,1,lty=2,col="red")
Tournament_auc = performance(Tournament_pred,measure="auc")
unlist(Tournament_auc@y.values) # 0.756
Tournament_allvars_final = subset(Tournament_modeling,
select=-c(Season,Result))
xgb <- xgboost(data = data.matrix(Tournament_allvars_final[,-39]),
label = Tournament_allvars_final$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_final[,-39]),
label = Tournament_allvars_final$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
Test_Full_0303 = read.csv("Intermediate Data/Test_Full_0219.csv")
Test_Top_0303 = Test_Full_0303[,names(Test_Full_0303) %in% names(Tournament_allvars_trn)]
xgb_pred = predict(xgb,newdata = data.matrix(Test_Top_0303))
Pred_Tournament_Top_0303 = data.frame(id=Test_Full_0303$id,pred=xgb_pred)
write.csv(Pred_Tournament_Top_0303,"Pred_Tournament_Top_0303_xgb_Elo.csv",row.names = F)
system.time(mod_rf <- train(as.factor(Result)~.,
data=Tournament_allvars_trn,method="rf",
trControl = control))
mod_rf
system.time(mod_rf <- train(as.factor(Result_num)~.,
data=Tournament_allvars_trn,method="rf",
trControl = control))
mod_rf
control = trainControl(method="cv",number=5,classProbs = T)
system.time(mod_rf <- train(as.factor(Result_num)~.,
data=Tournament_allvars_trn,method="rf",
trControl = control))
names(Tournament_modeling)
Tournament_modeling$Result = ifelse(Tournament_modeling$Result_num==1,"Win","Lose")
system.time(mod_rf <- train(as.factor(Result)~.-Result_num,
data=Tournament_allvars_trn,method="rf",
trControl = control))
Tournament_allvars_trn$Result = ifelse(Tournament_allvars_trn$Result_num==1,"Win","Lose")
system.time(mod_rf <- train(as.factor(Result)~.-Result_num,
data=Tournament_allvars_trn,method="rf",
trControl = control))
mod_rf
varImp(mod_rf)
system.time(mod_rf <- train(as.factor(Result)~.-Result_num,
data=Tournament_allvars_trn,method="rf",
trControl = control,tuneGrid=rfGrid))
rfGrid = expand.grid(mtry=c(10,15,20,25,30))
system.time(mod_rf <- train(as.factor(Result)~.-Result_num,
data=Tournament_allvars_trn,method="rf",
trControl = control,tuneGrid=rfGrid))
varImp(mod_rf)
Elo_all = read.csv("Elo_rating_0303.csv")
Test_Top_0303 = merge(Test_Top_0303,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
View(Test_Top_0303)
Test_Top_0303 = merge(Test_Full_0303,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Test_Full_0303 = merge(Test_Full_0303,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Test_Full_0303 = merge(Test_Full_0303,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Test_Full_0303$Rating_diff = Test_Full_0303$Rating.x - Test_Full_0303$Rating.y
Test_Top_0303 = Test_Full_0303[,names(Test_Full_0303) %in% names(Tournament_allvars_trn)]
xgb_pred = predict(xgb,newdata = data.matrix(Test_Top_0303))
Pred_Tournament_Top_0303 = data.frame(id=Test_Full_0303$id,pred=xgb_pred)
write.csv(Pred_Tournament_Top_0303,"Pred_Tournament_Top_0303_xgb_Elo.csv",row.names = F)
write.csv(Pred_Tournament_Top_0303,"Pred_Tournament_Top_0303_xgb_Elo.csv",row.names = F)
View(Test_Top_0303)
Test_Full_0303 = read.csv("Intermediate Data/Test_Full_0219.csv")
Elo_all = read.csv("Elo_rating_0303.csv")
Test_Full_0303 = merge(Test_Full_0303,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Test_Full_0303 = merge(Test_Full_0303,Elo_all,by.x="ID_SeasonTeam2",by.y="Player",all.x=T)
Test_Full_0303$Rating_diff = Test_Full_0303$Rating.x - Test_Full_0303$Rating.y
Test_Top_0303 = Test_Full_0303[,names(Test_Full_0303) %in% names(Tournament_allvars_trn)]
xgb_pred = predict(xgb,newdata = data.matrix(Test_Top_0303))
Pred_Tournament_Top_0303 = data.frame(id=Test_Full_0303$id,pred=xgb_pred)
write.csv(Pred_Tournament_Top_0303,"Pred_Tournament_Top_0303_xgb_Elo.csv",row.names = F)
View(Test_Top_0303)
1708/2080
2865.38*26
1870*26
