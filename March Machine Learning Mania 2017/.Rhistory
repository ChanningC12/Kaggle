sheetName = as.character(Sys.Date()))
as.character(Sys.Date())
dbc_response = read.xlsx("../Desktop/Deloitte Basketball/Roster/Bball club response.xlsx",
sheetIndex = 1)
View(dbc_response)
dbc_merged = merge(dbc_roster,dbc_response,by.x = "For.Attendance.Lookup", by.y = "Name", all.x = T)
View(dbc_merged)
library(plyr)
count(dbc_merged$Response)
dbc_merged[is.na(dbc_merged$Response)]
dbc_merged[is.na(dbc_merged$Response),]
library(xlsx)
dbc_response = read.xlsx("../Desktop/Deloitte Basketball/Roster/Bball club response.xlsx",
sheetIndex = 1)
dbc_merged = merge(dbc_roster,dbc_response,by.x = "For.Attendance.Lookup", by.y = "Name", all.x = T)
View(dbc_merged)
count(dbc_merged$Attendance_09.24.2016)
dbc_merged$Response_09.24.2016 = ifelse(is.na(dbc_merged$Response_09.24.2016) | dbc_merged$Response_09.24.2016 == "None",
"No Response", dbc_merged$Response_09.24.2016)
View(dbc_merged)
dbc_merged = merge(dbc_roster,dbc_response,by.x = "For.Attendance.Lookup", by.y = "Name", all.x = T)
dbc_merged$Response_09.24.2016 = ifelse(is.na(dbc_merged$Response_09.24.2016) | dbc_merged$Response_09.24.2016 == "None",
"No Response", as.character(dbc_merged$Response_09.24.2016))
count(dbc_merged$Response_09.24.2016)
str(dbc_merged)
dbc_merged$Response_09.24.2016 = as.factor(dbc_merged$Response_09.24.2016)
View(dbc_response)
View(dbc_merged)
dbc_merged$Attendance_09.24.2016 = ifelse(is.na(dbc_merged$Attendance_09.24.2016),
"N", as.character(dbc_merged$Response_09.24.2016))
count(dbc_merged$Response_09.24.2016)
count(dbc_merged$Attendance_09.24.2016)
dbc_merged = merge(dbc_roster,dbc_response,by.x = "For.Attendance.Lookup", by.y = "Name", all.x = T)
# Adjust the response and attendance columns
dbc_merged$Response_09.24.2016 = ifelse(is.na(dbc_merged$Response_09.24.2016) | dbc_merged$Response_09.24.2016 == "None",
"No Response", as.character(dbc_merged$Response_09.24.2016))
dbc_merged$Response_09.24.2016 = as.factor(dbc_merged$Response_09.24.2016)
dbc_merged$Attendance_09.24.2016 = ifelse(is.na(dbc_merged$Attendance_09.24.2016),
"N", as.character(dbc_merged$Attendance_09.24.2016))
dbc_merged$Attendance_09.24.2016 = as.factor(dbc_merged$Attendace_09.24.2016)
dbc_merged$Attendance_09.24.2016 = ifelse(is.na(dbc_merged$Attendance_09.24.2016),
"N", as.character(dbc_merged$Attendance_09.24.2016))
dbc_merged$Attendance_09.24.2016 = as.factor(dbc_merged$Attendace_09.24.2016)
dbc_merged = merge(dbc_roster,dbc_response,by.x = "For.Attendance.Lookup", by.y = "Name", all.x = T)
dbc_merged$Response_09.24.2016 = ifelse(is.na(dbc_merged$Response_09.24.2016) | dbc_merged$Response_09.24.2016 == "None",
"No Response", as.character(dbc_merged$Response_09.24.2016))
dbc_merged$Response_09.24.2016 = as.factor(dbc_merged$Response_09.24.2016)
dbc_merged$Attendance_09.24.2016 = ifelse(is.na(dbc_merged$Attendance_09.24.2016),
"N", as.character(dbc_merged$Attendance_09.24.2016))
View(dbc_merged)
dbc_merged$Attendance_09.24.2016 = as.factor(dbc_merged$Attendace_09.24.2016)
str(dbc_merged)
count(dbc_merged$Attendance_09.24.2016)
dbc_merged$Attendance_09.24.2016 = as.factor(dbc_merged$Attendace_09.24.2016)
dbc_merged$Attendance_09.24.2016 = as.factor(dbc_merged$Attendance_09.24.2016)
dbc_merged[dbc_merged$Name == "Cheng, Chi",]$Response_09.24.2016 = "Accepted"
dbc_merged[dbc_merged$Name == "Cheng, Chi",]$Attendance_09.24.2016 = "Y"
View(dbc_merged)
View(dbc_merged)
dbc_merged$LookUp = NULL
rename(dbc_merged,c("For.Attendance.Lookup"="LookUp"))
View(dbc_merged)
dbc_merge = rename(dbc_merged,c("For.Attendance.Lookup"="LookUp"))
dbc_merged = rename(dbc_merged,c("For.Attendance.Lookup"="LookUp"))
rm(dbc_merge)
View(dbc_merged)
setcolorder(dbc_merged,c(2,1,3:13))
dbc_merged = as.data.table(dbc_merged)
library(data.table)
dbc_merged = as.data.table(dbc_merged)
setcolorder(dbc_merged,c(2,1,3:13))
View(dbc_merged)
write.xlsx(dbc_merged,"../Desktop/Deloitte Basketball/Roster/Bball Club Roster.xlsx", append = T, sheetName = "2016-09-24")
library(xlsx)
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/BBall Club Roster.xlsx",na.strings = c("","NA"),sheetName = "2016-09-24")
library(rJava)
library(xlsxjars)
library(rJava)
library(xlsx)
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/BBall Club Roster.xlsx",na.strings = c("","NA"),sheetName = "2016-09-24")
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/BBall Club Roster.xlsx",na.strings = c("","NA"),sheetName = "2016-09-24")
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/BBall Club Roster.xlsx",na.strings = c("","NA"),sheetIndex = 4)
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/BBall Club Roster.xlsx",na.strings = c("","NA"),sheetName = "2016-09-24",header = T)
dbc_response = read.xlsx("../Desktop/Deloitte Basketball/Roster/Bball club response.xlsx",
sheetIndex = 1)
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/BBall Club Roster.xlsx",
na.strings = c("","NA"),sheetName = "2016-09-24",header = T)
source('C:/Users/chicheng3/Desktop/Deloitte Basketball/Attendance_automated.R', echo=TRUE)
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/Chicao Roster.xlsx",
na.strings = c("","NA"),sheetName = "2016-09-24",header = T)
dbc_roster = read.xlsx("../Desktop/Deloitte Basketball/Roster/Chicao Roster.xlsx",
na.strings = c("","NA"),sheetName = "2016-09-24",header = T)
credit = read.csv("../Desktop/Github/Machine-Learning-with-R-master/Machine-Learning-with-R-master/credit.csv")
View(credit)
str(credit)
table(credit$checking_balance)
table(credit$savings_balance)
summary(credit$months_loan_duration)
summary(credit$amount)
table(credit$default)
table(credit$default)
set.seed(12345)
credit_rand = credit[order(runif(1000)),]
credit_train = credit_rand[1:900,]
credit_test = credit_rand[901:1000,]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
library(caret)
inTrain = createDataPartition(credit$default, p = 0.9, list = F)
credit_train = credit[inTrain,]
credit_test = credit[-inTrain,]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
library(C50) # tree package is working as well
install.packages("C50")
credit$default = as.factor(credit$default)
inTrain = createDataPartition(credit$default, p = 0.9, list = F)
credit_train = credit[inTrain,]
credit_test = credit[-inTrain,]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
credit_model = C5.0(credit_train[-21],as.factor(credit_train$default))
credit_model
library(C50) # tree package is working as well
credit_model = C5.0(credit_train[-21],as.factor(credit_train$default))
credit_model
summary(credit_model)
credit_pred = predict(credit_model, credit_test)
library(gmodels)
CrossTable(credit_test$default, credit_pred, prop.chisq = F, prop.c = F, prop.r = F, dnn = c("actual default","predicted default"))
library(pROC)
auc = roc(credit_test$default, credit_pred)
auc = roc(credit_test$default, credit_pred)
library(ROCR)
library(ROCR)
pred = prediction(prediction = credit_pred, label = credit_test$default)
CrossTable(credit_test$default, credit_pred, prop.chisq = F, prop.c = F, prop.r = F, dnn = c("actual default","predicted default"))
credit_boost10 = C5.0(credit_train[-21], as.factor(credit_train$default), trials = 10)
credit_boost10
credit_boost_pred10 = predict(credit_boost10, credit_test)
CrossTable(credit_test$default, credit_boost_pred10, prop.chisq = F, prop.c = F, prop.r = F, dnn = c("actual default", "predicted default"))
error_cost = matrix(c(0,1,4,0), nrow = 2) # FN cost is four times aws much as a FP
error_cost
credit_cost = C5.0(credit_train[-21], as.factor(credit_train$default), costs = error_cost)
credit_cost_pred = predict(credit_cost, credit_test)
CrossTable(credit_test$default, credit_cost_pred, prop.chisq = F, prop.c = F, prop.r = F, dnn = c("actual default", "predicted default"))
library(tree)
library(ISLR)
install.packaegs("ISLR")
install.packages("ISLR")
library(ISLR)
attach(Carseats)
View(Carseats)
str(Carseats)
summary(Sales)
High = ifelse(Sales<=8,"No","Yes")
table(High)
Carseats = data.frame(Carseats,High)
tree.carseats = tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
par(mfrow=c(1,1))
plot(tree.carseats)
text(tree.carseats,pretty=0,cex=0.6)
tree.carseats
table(Carseats$ShelveLoc)
boxplot(Sales~ShelveLoc)
85/400
set.seed(2)
dim(Carseats)
train = sample(1:nrow(Carseats),200)
Carseats.test = Carseats[-train,]
High.test = High[-train]
tree.carseats = tree(High~.-Sales,data = Carseats, subset = train)
tree.pred = predict(tree.carseats,Carseats.test,type = "class")
table(tree.pred,High.test)
cv.carseats = cv.tree(tree.carseats,FUN = prune.misclass)
set.seed(3)
cv.carseats = cv.tree(tree.carseats,FUN = prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow = c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$k,cv.carseats$dev,type="b")
prune.carseats = prune.misclass(tree.carseats,best=10)
par(mfrow = c(1,1))
plot(prune.carseats)
text(prune.carseats,pretty=0,cex=0.6)
tree.pred = predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
library(MASS)
set.seed(1)
train = sample(1:nrow(Boston),nrow(Boston)/2)
View(Boston)
str(Boston)
help("Boston")
train = sample(1:nrow(Boston),nrow(Boston)/2)
tree.boston = tree(medv~.,data=Boston,subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston,pretty=0,cex=0.7)
cv.boston = cv.tree(tree.boston)
cv.boston
plot(cv.boston$size,cv.boston$dev,type="b")
prune.boston = prune.tree(tree.boston,best=5)
plot(prune.boston)
text(prune.boston,pretty=0,cex=0.8)
yhat = predict(tree.boston,newdata=Boston[-train,])
boston.test = Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
prune.boston
library(randomForest)
set.seed(1)
dim(Boston)
library(randomForest)
bag.boston = randomForest(medv~.,data=Boston,subset=train,mtry=13,importance=T)
bag.boston
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
mean((yhat.bag - boston.test)^2)
# Random forest proceeds in exactly the same way, except that we use a smaller value of mtry
set.seed(1)
rf.boston = randomForest(medv~.,data=Boston,subset=train,mtry=6,importance = T)
yhat.rf = predict(rf.boston,newdata=Boston[-train,])
mean((yhat.rf-boston.test)^2)
importance(rf.boston)
varImpPlot(rf.boston)
library(gbm)
set.seed(1)
?gbm
??gbm
install.packages("gbm")
library("gbm", lib.loc="~/R/win-library/3.2")
boost.boston = gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=5000,interaction.depth=4) # distribution="bernoulli" if it were a binary classification problem
summary(boost.boston)
par(mfrow=c(1,2))
plot(boost.boston,i="rm")
plot(boost.boston,i="lstat")
yhat.boost = predict(boost.boston,newdata=Boston[-train,],n.trees=5000)
mean((yhat.boost-boston.test)^2)
boost.boston = gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=5000,interaction.depth=4,shrinkage=0.2,verbose=F)
yhat.boost = predict(boost.boston,newdata=Boston[-train,],n.trees=5000)
mean((yhat.boost-boston.test)^2)
View(credit)
library(ISLR)
View(Smarket)
str(Smarket)
dim(Smarket)
library(plyr)
count(Smarket$Year)
help(Smarket)
round(cor(Smarket[,-9]),2)
library(corrplot)
corrplot(cor(Smarket[,-9],use="pairwise.complete.obs"))
corrplot(cor(Smarket[,-9],use="pairwise.complete.obs"),order = "hclust",method = "shade", tl.cex=0.7)
plot(Volume)
attach(Smarket)
plot(Volume)
glm.fit = glm(Direction~Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = Smarket)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit$coef)
glm.probs = predict(glm.fit,type="response")
glm.probs[1:10]
glm.pred = rep("Down",1250)
glm.pred[glm.probs>0.5] = "Up"
table(glm.pred,Direction)
mean(glm.pred == Direction)
Smarket = Smarket
glm.fit = glm(Direction~Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = binomial, data = Smarket)
Smarket$prob = predict(glm.fit, type = "response")
View(Smarket)
Smarket$Direction_pred = ifelse(Smarket$prob>0.5,"Up","Down")
table(Direction_pred,Direction)
table(Smarket$Direction_pred,Smarket$Direction)
mean(Smarket$Direction_pred,Smarket$Direction)
mean(Smarket$Direction_pred=Smarket$Direction)
mean(Smarket$Direction_pred==Smarket$Direction)
library(foreign)
library(nnet)
library(ggplot2)
library(reshape1)
library(reshape2)
ml <- read.dta("http://www.ats.ucla.edu/stat/data/hsbdemo.dta")
View(ml)
str(ml)
ml = as.data.frame(ml)
str(ml)
attach(ml)
table(ses,prog)
tapply(write, prog, mean)
ml$prog2 = relevel(ml$prog, ref="academic")
View(ml)
test = multinom(prog2~ses+write, data=ml)
summary(test)
z <- summary(test)$coefficients/summary(test)$standard.errors
z
p <- (1 - pnorm(abs(z), 0, 1))*2
p
exp(2)
exp(1)
exp(coef(test))
head(pp=fitted(test))
head(pp=fitted(test))
head(fitted(test))
dses <- data.frame(ses = c("low", "middle", "high"),
write = mean(ml$write))
View(dses)
predict(test, newdata = dses, "probs")
dwrite <- data.frame(ses = rep(c("low", "middle", "high"), each = 41),
write = rep(c(30:70), 3))
View(dwrite)
pp.write <- cbind(dwrite, predict(test, newdata = dwrite, type = "probs", se = TRUE))
by(pp.write[, 3:5], pp.write$ses, colMeans)
View(pp.write)
lpp <- melt(pp.write, id.vars = c("ses", "write"), value.name = "probability")
head(lpp) # view first few rows
View(lpp)
ggplot(lpp, aes(x = write, y = probability, colour = ses)) +
geom_line() +
facet_grid(variable ~ ., scales="free")
120755 + 189952
23506+24184
279356+23926
121466+189241
767.39+447.76
138875+54739
55528+138086
54739-55528
303635/310707
187519/195657
5764+12428
303282+353
216173/303282
194495+147
216173+152
216173-12458
194495-11236
12946/2\
12946/2
202130-195657
6473-1408
216325-202130
195657-189184
28390/2
174837-9958
14195-546
202130-195657
152+546+1408+13649+6437+9958+164879
188100-187519
89.5+7.7+2.82
194638-147
188100-582
17578+8747
26896-26325
138875/195657
2942/195657
195500-10835
138875+54739
138875+54739+2043
308664+2043
data.df = data.frame(topic=c(rep(c("Gossip","Sports","Weather"),each=4)),
duration = c(6:9, 2:5, 4:7))
View(data.df)
attach(data.df)
boxplot(duration~topic, data=data.df)
boxplot(duration~topic, data=data.df, ylab="Duration of conversation")
lm(duration~topic, data=data.df)
summary(lm(duration~topic, data=data.df))
model.lm = lm(duration~topic, data=data.df)
rsq = summary(model.lm)$r.squared
sqrt(rsq)
print(model.lm$fitted.values)
cor(data.df$duration, model.lm$fitted.values)
library(heplots)
install.packages("heplots")
library(heplots)
library(heplots)
model.aov = aov(duration~topic, data=data.df)
summary(model.aov)
etasq(model.aov,partial=F)
librar(MASS)
library(MASS)
View(survey)
help(survey)
tbl = table(survey$Smoke, survey$Exer)
tbl
chisq.test(tbl)
data(anxiety)
View(anxiety)
library(irr)
install.packages("irr")
library(irr)
library(irr)
data(anxiety)
View(anxiety)
help(anxiety)
apply(anxiety,2,table)
icc(anxiety,model="twoway",type="agreement")
r1 = round(rnorm(20,10,4))
r2 = round(r1+10+rnorm(20,0,2))
r3 = round(r1+20+rnorm(20,0,2))
icc(cbind(r1,r2,r3),"twoway")
install.packages("lsr")
library(lsr)
library(lsr)
cramersV(tbl)
chisq.test(tbl)
tbl
26402-22688
392*4
4.8/2.7
4.82/2.68
86.9/91.3
37500-25000
?prop.test
prop.test(c(882,27791),c(7774,290343)
prop.test(c(882,27791),c(7774,290343))
prop.test(c(882,7774),c(27791,290343))
16512+24282+52313+82200
32715+19687+73507+14236+78788+30738+40672
1210/0.79
1210/0.8
1520/40
1210+68
1278/1600
1278/1800
1210/0.8
1210/1520
2080*75%
2080*0.75
520-310
210/40
150*26
3900*.25
data("mtcars")
mtcars = mtcars
sapply(mtcars,function(x) sum(is.na(x)))
a = sapply(mtcars,function(x) sum(is.na(x)))
a = data.frame(a)
View(a)
a$pct = a$a/nrow(mtcars)
View(a)
data()
a = data("AirPassengers")
a = AirPassengers
a = CO2
sapply(,function(x) sum(is.na(x)))
sapply(CO2,function(x) sum(is.na(x)))
sapply(Nile,function(x) sum(is.na(x)))
sapply(Orange,function(x) sum(is.na(x)))
sapply(women,function(x) sum(is.na(x)))
sapply(trees,function(x) sum(is.na(x)))
sapply(Swiss,function(x) sum(is.na(x)))
87323+203020
rm(list=ls())
gc()
getwd()
setwd("../Desktop/Kaggle & Coursera/March Machine Learning Mania 2017/")
team = read.csv("Teams.csv")
dim(team)
str(team)
head(team)
View(team)
season = read.csv("Seasons.csv")
dim(season)
str(season)
head(season)
View(season)
RSCR = read.csv("RegularSeasonCompactResults.csv")
dim(RSCR)
str(RSCR)
head(RSCR)
tail(RSCR)
table(RSCR$Wloc)
RSDR = read.csv("RegularSeasonDetailedResults.csv")
str(RSDR)
test = RSCR[RSCR$Season>=2003,]
rm(test)
head(RSDR)
str(RSCR)
TCR = read.csv("TourneyCompactResults.csv")
str(TCR)
range(TCR$Daynum)
TDR = read.csv("TourneyDetailedResults.csv")
str(TDR)
unique(TCR$Daynum)
TS = read.csv("TourneySeeds.csv")
str(TS)
head(TS)
unique(TS$Seed)
TSlot = read.csv("TourneySlots.csv")
str(TSlot)
head(TSlot)
tail(TSlot)
View(TSlot)
View(TS)
str(team)
head(team)
str(season)
head(season)
View(season)
str(RSCR)
head(RSCR)
str(RSDR)
str(TCR)
str(TS)
head(TS)
str(TSlot)
head(TSlot)
range(RSDR$Season)
str(RSDR)
