table(RSDR$Wloc,RSDR$Lloc)
# Subset Winning team and Losing Team
RSDR_W = RSDR[,c(1:5,8:22,7,23:36)]
RSDR_L = RSDR[,c(1:3,6:7,36,9,23:35,5,10:22,8)]
# Assign result
RSDR_W$Result = "Win"
RSDR_L$Result = "Lose"
# Format title for appending
title = c("id","Season","Daynum","Team","Score","Location","Numot",
"fgm","fga","fgm3","fga3","ftm","fta","or","dr","ast","to","stl","blk","pf",
"Score_opp","fgm_opp","fga_opp","fgm3_opp","fga3_opp","ftm_opp",
"fta_opp","or_opp","dr_opp","ast_opp","to_opp","stl_opp","blk_opp","pf_opp","Location_opp",
"Result")
colnames(RSDR_W) = title
colnames(RSDR_L) = title
# Merge the two tables
RSDR_all = rbind(RSDR_W,RSDR_L)
class(RSDR_all)
View(RSDR_all)
RSDR_all = RSDR_all[order(RSDR_all$Season,RSDR_all$Daynum,RSDR_all$id),]
RSDR_all$ID_SeasonTeam = paste(RSDR_all$Season,"_",RSDR_all$Team,sep="")
RSDR_all = RSDR_all[,c(1,37,2:36)]
Game = merge(RSCR_all,RSDR_all,by=c("id","ID_SeasonTeam","Team","Season","Daynum"),all.y = T)
# Check the data quality, score, location, numov, result
Game$score_qc <- Game$Score.x == Game$Score.y
Game$location_qc <- Game$Location.x == Game$Location.y
Game$numov_qc <- Game$Numov.x == Game$Numov.y
Game$result_qc <- Game$Result.x == Game$Result.y
table(Game$score_qc)
table(Game$location_qc)
table(Game$numov_qc)
table(Game$result_qc)
Game = Game[,c(1:9,14:26,28:42)]
names(Game)[6:9] = c("Score","Location","Numot","Score_opp")
names(Game)[37] = "Result"
View(Game)
write.csv(Game,"Intermediate Data/Game.csv",row.names = F)
rm(list=ls())
gc()
Games = read.csv("Intermediate Data/Game.csv")
Team_metric <- Game %>%
group_by(ID_SeasonTeam)%>%
summarise(Games=n(), # Games played
Games_won = sum(Result=="Win"), # Games won
Winning_percent = Games_won/Games, # Winning %
Score_avg = mean(Score), # Average scores per game
Score_avg_opp = mean(Score_opp), # Average scores per game allowed
Score_avg_diff = Score_avg-Score_avg_opp, # Average scores differential
Overtime = sum(Numot), # Number of overtimes played
Overtime_won_prob = sum(Numot>0 & Result=="Win") / Overtime, # Overtime games winning %
Home_won_prob = sum(Location=="H" & Result=="Win") / sum(Location=="H"), # Home game winning %
Away_won_prob = sum(Location=="A" & Result=="Win") / sum(Location=="A"), # Away game winning %
Neutral_won_prob = sum(Location=="N" & Result=="Win") / sum(Location=="N"), # Neutral game winning %
FGM_avg = mean(fgm), # Field Goal Made Average
FGA_avg = mean(fga), # Field Goal Attempted Average
FGP = FGM_avg/FGA_avg, # Field Goal %
FGP_opp = mean(fgm_opp) / mean(fga_opp), # Field Goal % Allowed
FGP_diff = FGP - FGP_opp, # Field Goal % Diff
FGM3_avg = mean(fgm3), # 3 pointer made average
FGA3_avg = mean(fga3), # 3 pointer attemped average
FGP3 = FGM3_avg / FGA3_avg, # 3 pointer %
FGP3_opp = mean(fgm3_opp) / mean(fga3_opp), # 3 pointer % allowed
FGP3_diff = FGP3 - FGP3_opp, # 3 pointer % diff
FTM_avg = mean(ftm), # Free throw made average
FTA_avg = mean(fta), # Free throw attemped average
FTP = FTM_avg / FTA_avg, # Free throw %
FTP_opp = mean(ftm_opp) / mean(fta_opp), # Free throw % allowed
FTP_diff = FTP - FTP_opp, # Free throw % diff
OR_avg = mean(or), # Offensive rebound average
OR_avg_opp = mean(or_opp), # Offensive rebound allowed
DR_avg = mean(dr), # Defensive rebound average
DR_avg_opp = mean(dr_opp), # Defensive rebound allowexd
TR_avg = OR_avg + DR_avg, # Total rebounds average
TR_avg_opp = OR_avg_opp + DR_avg_opp, # Total rebounds allowed
TR_avg_diff = TR_avg - TR_avg_opp, # Total rebounds diff
OR_percent = OR_avg / TR_avg, # Offensive rebound %
AST_avg = mean(ast), # Assists average
AST_avg_opp = mean(ast_opp), # Assists allowed
TO_avg = mean(to), # turnovers
TO_avg_opp = mean(to_opp), # turnovers forced
AST_to_TO = AST_avg / TO_avg, # A/O
AST_to_SCORE = AST_avg / Score_avg, # Assists to Scores
STL_avg = mean(stl), # Steal average
STL_to_TO = STL_avg / TO_avg, # STL to TO
BLK_avg = mean(blk), # Blocks average
PF_avg = mean(pf), # Personal fouls average
PF_avg_opp = mean(pf_opp), # Personal fouls draw
EFF = (Score_avg + TR_avg + AST_avg + STL_avg + BLK_avg) -
((FGA_avg - FGM_avg) - (FTA_avg - FTM_avg) + TO_avg) # Team Efficiency
)
rm(list=ls())
gc()
Game = read.csv("Intermediate Data/Game.csv")
Team_metric <- Game %>%
group_by(ID_SeasonTeam)%>%
summarise(Games=n(), # Games played
Games_won = sum(Result=="Win"), # Games won
Winning_percent = Games_won/Games, # Winning %
Score_avg = mean(Score), # Average scores per game
Score_avg_opp = mean(Score_opp), # Average scores per game allowed
Score_avg_diff = Score_avg-Score_avg_opp, # Average scores differential
Overtime = sum(Numot), # Number of overtimes played
Overtime_won_prob = sum(Numot>0 & Result=="Win") / Overtime, # Overtime games winning %
Home_won_prob = sum(Location=="H" & Result=="Win") / sum(Location=="H"), # Home game winning %
Away_won_prob = sum(Location=="A" & Result=="Win") / sum(Location=="A"), # Away game winning %
Neutral_won_prob = sum(Location=="N" & Result=="Win") / sum(Location=="N"), # Neutral game winning %
FGM_avg = mean(fgm), # Field Goal Made Average
FGA_avg = mean(fga), # Field Goal Attempted Average
FGP = FGM_avg/FGA_avg, # Field Goal %
FGP_opp = mean(fgm_opp) / mean(fga_opp), # Field Goal % Allowed
FGP_diff = FGP - FGP_opp, # Field Goal % Diff
FGM3_avg = mean(fgm3), # 3 pointer made average
FGA3_avg = mean(fga3), # 3 pointer attemped average
FGP3 = FGM3_avg / FGA3_avg, # 3 pointer %
FGP3_opp = mean(fgm3_opp) / mean(fga3_opp), # 3 pointer % allowed
FGP3_diff = FGP3 - FGP3_opp, # 3 pointer % diff
FTM_avg = mean(ftm), # Free throw made average
FTA_avg = mean(fta), # Free throw attemped average
FTP = FTM_avg / FTA_avg, # Free throw %
FTP_opp = mean(ftm_opp) / mean(fta_opp), # Free throw % allowed
FTP_diff = FTP - FTP_opp, # Free throw % diff
OR_avg = mean(or), # Offensive rebound average
OR_avg_opp = mean(or_opp), # Offensive rebound allowed
DR_avg = mean(dr), # Defensive rebound average
DR_avg_opp = mean(dr_opp), # Defensive rebound allowexd
TR_avg = OR_avg + DR_avg, # Total rebounds average
TR_avg_opp = OR_avg_opp + DR_avg_opp, # Total rebounds allowed
TR_avg_diff = TR_avg - TR_avg_opp, # Total rebounds diff
OR_percent = OR_avg / TR_avg, # Offensive rebound %
AST_avg = mean(ast), # Assists average
AST_avg_opp = mean(ast_opp), # Assists allowed
TO_avg = mean(to), # turnovers
TO_avg_opp = mean(to_opp), # turnovers forced
AST_to_TO = AST_avg / TO_avg, # A/O
AST_to_SCORE = AST_avg / Score_avg, # Assists to Scores
STL_avg = mean(stl), # Steal average
STL_to_TO = STL_avg / TO_avg, # STL to TO
BLK_avg = mean(blk), # Blocks average
PF_avg = mean(pf), # Personal fouls average
PF_avg_opp = mean(pf_opp), # Personal fouls draw
EFF = (Score_avg + TR_avg + AST_avg + STL_avg + BLK_avg) -
((FGA_avg - FGM_avg) - (FTA_avg - FTM_avg) + TO_avg) # Team Efficiency
)
colSums(is.na(Team_metric))
Team_metric$Overtime_won_prob[is.na(Team_metric$Overtime_won_prob)] = Team_metric$Winning_percent[is.na(Team_metric$Overtime_won_prob)]
Team_metric$Neutral_won_prob[is.na(Team_metric$Neutral_won_prob)] = Team_metric$Winning_percent[is.na(Team_metric$Neutral_won_prob)]
Team_metric$Home_won_prob[is.na(Team_metric$Home_won_prob)] = Team_metric$Winning_percent[is.na(Team_metric$Home_won_prob)]
colSums(is.na(Team_metric))
write.csv(Team_metric,"Intermediate Data/Team_metric_all.csv",row.names = F)
# Additional metrics creation
Game = mutate(Game,
# 2. True shooting percentage: PTS / 2*(FGA + 0.44*FTA)
TSP = Score/(2*(fga+0.44*fta)),
TSP_opp = Score_opp/(2*(fga_opp+0.44*fta_opp)),
# Close game ind
Close_game_ind = ifelse(abs(Score-Score_opp)<10,1,0),
# 3. Effective Field Goal Percentage: (FG + 0.5*3P) / FGA
EFGP = (fgm+0.5*fgm3)/fga,
# 4. Free throw attempt to Field goal attempt
FTA_to_FGA = fta/fga,
# 5. Block per foul
BLK_to_PF = blk/pf,
# 6. Defensive plays per foul: (Steal + Blocks) / Fouls
D_to_PF = (stl+blk)/pf,
# 7. Win score: points+rebounds+steals+0.5*Assists+0.5*blocked shots-field goal attempts-turnovers-0.5*FTA-0.5*PF
Win_score = Score+or+dr+stl+0.5*ast+0.5*blk-fga-to-0.5*fta-0.5*pf,
# 8. Game score: points+0.4*FG-0.7*FGA-0.4*(FTA-FT)+0.7*OR+0.3*DB+STL+0.7*AST+0.7*BLK-0.4*PF-TOV
Game_score = Score+0.4*fgm-0.7*fga-0.4*(fta-ftm)+0.7*or+0.3*dr+stl+0.7*ast+0.7*blk-0.4*pf-to,
# 9. Percent of points from 3 pointers: FG3*3 / avg scores
Score_3_percent = fgm3*3/Score,
# 10. Offensive Efficiency: (FG+A)/(FGA-ORB+A+TO)
OE = (fgm+ast)/(fga-or+ast+to),
# 11. Score per Estimated Team Possessions: POSS = FGA+0.45*FTA+TO-ORB
Score_to_Poss = Score/(fga+0.45*fta+to-or),
# 12. Efficient Offensive Production: RAW EOP = 0.76*Assists+Points*OE
EOP = (0.76*ast+Score)*(fgm+ast)/(fga-or+ast+to)
)
tapply(Game$TSP,Game$Result,mean)
tapply(Game$TSP_opp,Game$Result,mean)
Team_metric_add <- Game %>%
group_by(ID_SeasonTeam)%>%
dplyr::summarise(
# 1. Close game winning percentage: close game is defined as game within 10 points
Winning_percent_close = sum(Result=="Win" & Close_game_ind==1) / sum(Close_game_ind==1),
# 2. True shooting percentage: PTS / 2*(FGA + 0.44*FTA)
TSP_avg = mean(TSP),
TSP_avg_opp = mean(TSP_opp),
# 3. Effective Field Goal Percentage: (FG + 0.5*3P) / FGA
EFGP_avg = mean(EFGP),
# 4. Free throw attempt to Field goal attempt
FTA_to_FGA_avg = mean(FTA_to_FGA),
# 5. Block per foul
BLK_to_PF_avg = mean(BLK_to_PF),
# 6. Defensive plays per foul: (Steal + Blocks) / Fouls
D_to_PF_avg = mean(D_to_PF),
# 7. Win Score
Win_score_avg = mean(Win_score),
# 8. Game Score
Game_score_avg = mean(Game_score),
# 9. Percent of points from 3 pointers: FG3*3 / avg scores
Score_3_percent_avg = mean(Score_3_percent),
# 10. Offensive Efficiency: (FG+A)/(FGA-ORB+A+TO)
OE_avg = mean(OE),
# 11. Score per Estimated Team Possessions: POSS = FGA+0.45*FTA+TO-ORB
Score_to_Poss_avg = mean(Score_to_Poss),
# 12. Efficient Offensive Production: RAW EOP = 0.76*Assists+Points*OE
EOP_avg = mean(EOP)
)
colSums(is.na(Team_metric_add))
write.csv(Team_metric_add,"Intermediate Data/Team_metric_add.csv",row.names = F)
Team_metric_all = merge(Team_metric,Team_metric_add,by="ID_SeasonTeam",all=T)
colSums(is.na(Team_metric_all))
write.csv(Team_metric_all,"Intermediate Data/Team_metric_all.csv",row.names = F)
View(Team_metric_all)
Test_Full = read.csv("Raw Data/sample_submission.csv") # read in submission dataset
rm(list=ls())
gc()
Test_Full = read.csv("Raw Data/sample_submission.csv") # read in submission dataset
Seed = read.csv("Intermediate Data/Seed.csv") # read in seed information
Team_metric = read.csv("Intermediate Data/Team_metric_all.csv") # read in metric dataset
Seed_sub = Seed[Seed$Season>=2003,c(1,5:7)] # Only keep 2003 and onward
View(Seed_sub)
Test_Full$Season = as.numeric(substr(Test_Full$id,1,4))
Test_Full$Team1 = as.numeric(substr(Test_Full$id,6,9))
Test_Full$Team2 = as.numeric(substr(Test_Full$id,11,14))
Test_Full$ID_SeasonTeam1 = paste(Test_Full$Season,"_",Test_Full$Team1,sep="")
Test_Full$ID_SeasonTeam2 = paste(Test_Full$Season,"_",Test_Full$Team2,sep="")
View(Test_Full)
Test_Full_1 = merge(Test_Full,Seed_sub,by.x="ID_SeasonTeam1",by.y="Team_ID",all.x=T)
Test_Full_2 = merge(Test_Full_1,Seed_sub,by.x="ID_SeasonTeam2",by.y="Team_ID",all.x=T,
suffixes = c("_Team1","_Team2"))
Test_Full_2 = mutate(Test_Full_2,Seed_Diff = Seed_num_Team2 - Seed_num_Team1)
Test_Seed_1 = merge(Test_Full_2,Team_metric,by.x="ID_SeasonTeam1",by.y="ID_SeasonTeam",all.x=T)
Test_Seed_2 = merge(Test_Seed_1,Team_metric,by.x="ID_SeasonTeam2",by.y="ID_SeasonTeam",all.x=T,
suffixes = c("_Team1","_Team2"))
Test_Full_0219 = mutate(Test_Seed_2,
Winning_percent_diff = Winning_percent_Team1 - Winning_percent_Team2,
Score_avg_diff = Score_avg_Team1 - Score_avg_Team2,
Score_avg_opp_diff = Score_avg_opp_Team2 - Score_avg_opp_Team1,
Score_avg_diff_diff = Score_avg_diff_Team1 - Score_avg_diff_Team2,
Overtime_won_prob_diff = Overtime_won_prob_Team1 - Overtime_won_prob_Team2,
Home_won_prob_diff = Home_won_prob_Team1 - Home_won_prob_Team2,
Away_won_prob_diff = Away_won_prob_Team1 - Away_won_prob_Team2,
Neutral_won_prob_diff = Neutral_won_prob_Team1 - Neutral_won_prob_Team2,
FGP_diff = FGP_Team1 - FGP_Team2,
FGP_opp_diff = FGP_opp_Team2 - FGP_opp_Team1,
FGP_diff_diff = FGP_diff_Team1 - FGP_diff_Team2,
FGP3_diff = FGP3_Team1 - FGP3_Team2,
FGP3_opp_diff = FGP3_opp_Team2 - FGP3_opp_Team1,
FGP3_diff_diff = FGP3_diff_Team1 - FGP3_diff_Team2,
FTP_diff = FTP_Team1 - FTP_Team2,
FTP_opp_diff = FTP_opp_Team2 - FTP_opp_Team1,
FTP_diff_diff = FTP_diff_Team1 - FTP_diff_Team2,
OR_diff = OR_avg_Team1 - OR_avg_Team2,
OR_opp_diff = OR_avg_opp_Team2 - OR_avg_opp_Team1,
DR_diff = DR_avg_Team1 - DR_avg_Team2,
DR_opp_diff = DR_avg_opp_Team2 - DR_avg_opp_Team1,
TR_diff = TR_avg_Team1 - TR_avg_Team2,
TR_opp_diff = TR_avg_opp_Team2 - TR_avg_opp_Team1,
TR_diff_diff = TR_avg_diff_Team1 - TR_avg_diff_Team2,
OR_percent_diff = OR_percent_Team1 - OR_percent_Team2,
AST_diff = AST_avg_Team1 - AST_avg_Team2,
AST_opp_diff = AST_avg_opp_Team2 - AST_avg_opp_Team1,
TO_diff = TO_avg_Team2 - TO_avg_Team1,
TO_opp_diff = TO_avg_opp_Team2 - TO_avg_opp_Team1,
AST_to_TO_diff = AST_to_TO_Team1 - AST_to_TO_Team2,
AST_to_SCORE_diff = AST_to_SCORE_Team1 - AST_to_SCORE_Team2,
STL_diff = STL_avg_Team1 - STL_avg_Team2,
STL_to_TO_diff = STL_to_TO_Team1 - STL_to_TO_Team2,
BLK_diff = BLK_avg_Team1 - BLK_avg_Team2,
PF_diff = PF_avg_Team2 - PF_avg_Team1,
PF_opp_diff = PF_avg_opp_Team1 - PF_avg_opp_Team2,
EFF_diff = EFF_Team1 - EFF_Team2,
Win_close_diff = Winning_percent_close_Team1 - Winning_percent_close_Team2,
TSP_diff = TSP_avg_Team1 - TSP_avg_Team2,
EFGP_diff = EFGP_avg_Team1 - EFGP_avg_Team2,
FTA_to_FGA_diff = FTA_to_FGA_avg_Team1 - FTA_to_FGA_avg_Team2,
BLK_to_PF_diff = BLK_to_PF_avg_Team1 - BLK_to_PF_avg_Team2,
D_to_PF_diff = D_to_PF_avg_Team1 - D_to_PF_avg_Team2,
Win_score_diff = Win_score_avg_Team1 - Win_score_avg_Team2,
Game_score_diff = Game_score_avg_Team1 - Game_score_avg_Team2,
Score_3_percent_diff = Score_3_percent_avg_Team1 - Score_3_percent_avg_Team2,
OE_diff = OE_avg_Team1 - OE_avg_Team2,
Score_to_Poss_diff = Score_to_Poss_avg_Team1 - Score_to_Poss_avg_Team2,
EOP_diff = EOP_avg_Team1 - EOP_avg_Team2
)
Test_Full_0219 = Test_Full_0219[,c(3,5,2,6,1,7,8:ncol(Test_Full_0219))]
View(Test_Full_0219)
write.csv(Test_Full_0219,"Intermediate Data/Test_Full.csv",row.names = F)
rm(list=ls())
gc()
Seed = read.csv("Intermediate Data/Seed.csv")
TDR = read.csv("Raw Data/TourneyDetailedResults.csv")
Team_metric = read.csv("Intermediate Data/Team_metric_all.csv")
Seed_sub = Seed[Seed$Season>=2003,c(1,5:7)]
TDR_sub = TDR[TDR$Season>=2003,]
Tournament = TDR_sub
Tournament$Team1 = ifelse(Tournament$Wteam>Tournament$Lteam,Tournament$Lteam,Tournament$Wteam)
Tournament$Score_Team1 = ifelse(Tournament$Wteam>Tournament$Lteam,Tournament$Lscore,Tournament$Wscore)
Tournament$Team2 = ifelse(Tournament$Wteam>Tournament$Lteam,Tournament$Wteam,Tournament$Lteam)
Tournament$Score_Team2 = ifelse(Tournament$Wteam>Tournament$Lteam,Tournament$Wscore,Tournament$Lscore)
Tournament$Result = ifelse(Tournament$Score_Team1>Tournament$Score_Team2,"Win","Lose")
Tournament$id = paste(Tournament$Season,Tournament$Team1,Tournament$Team2,sep="_")
Tournament$ID_SeasonTeam1 = paste(Tournament$Season,Tournament$Team1,sep="_")
Tournament$ID_SeasonTeam2 = paste(Tournament$Season,Tournament$Team2,sep="_")
Tournament = Tournament[,c(40,1,2,41,35,42,37,39)]
View(Tournament)
Tournament_1 = merge(Tournament,Seed_sub,by.x="ID_SeasonTeam1",by.y="Team_ID",all.x=T)
Tournament_2 = merge(Tournament_1,Seed_sub,by.x="ID_SeasonTeam2",by.y="Team_ID",all.x=T,
suffixes = c("_Team1","_Team2"))
Tournament_2 = mutate(Tournament_2,Seed_Diff = Seed_num_Team2 - Seed_num_Team1)
Tournament_seed = Tournament_2[,c(3,4,5,2,6,1,7,9:15,8)]
View(Tournament_seed)
Tournament_seed_1 = merge(Tournament_seed,Team_metric,by.x="ID_SeasonTeam1",by.y="ID_SeasonTeam",all.x=T)
Tournament_seed_2 = merge(Tournament_seed_1,Team_metric,by.x="ID_SeasonTeam2",by.y="ID_SeasonTeam",all.x=T,
suffixes = c("_Team1","_Team2"))
Tournament_allvars = Tournament_seed_2[,c(3,4,5,2,6,1,7,8:14,16:ncol(Tournament_seed_2),15)]
View(Tournament_allvars)
Tournament_modeling = mutate(Tournament_allvars,
# Add all the differential values
Winning_percent_diff = Winning_percent_Team1 - Winning_percent_Team2,
Score_avg_diff = Score_avg_Team1 - Score_avg_Team2,
Score_avg_opp_diff = Score_avg_opp_Team2 - Score_avg_opp_Team1,
Score_avg_diff_diff = Score_avg_diff_Team1 - Score_avg_diff_Team2,
Overtime_won_prob_diff = Overtime_won_prob_Team1 - Overtime_won_prob_Team2,
Home_won_prob_diff = Home_won_prob_Team1 - Home_won_prob_Team2,
Away_won_prob_diff = Away_won_prob_Team1 - Away_won_prob_Team2,
Neutral_won_prob_diff = Neutral_won_prob_Team1 - Neutral_won_prob_Team2,
FGP_diff = FGP_Team1 - FGP_Team2,
FGP_opp_diff = FGP_opp_Team2 - FGP_opp_Team1,
FGP_diff_diff = FGP_diff_Team1 - FGP_diff_Team2,
FGP3_diff = FGP3_Team1 - FGP3_Team2,
FGP3_opp_diff = FGP3_opp_Team2 - FGP3_opp_Team1,
FGP3_diff_diff = FGP3_diff_Team1 - FGP3_diff_Team2,
FTP_diff = FTP_Team1 - FTP_Team2,
FTP_opp_diff = FTP_opp_Team2 - FTP_opp_Team1,
FTP_diff_diff = FTP_diff_Team1 - FTP_diff_Team2,
OR_diff = OR_avg_Team1 - OR_avg_Team2,
OR_opp_diff = OR_avg_opp_Team2 - OR_avg_opp_Team1,
DR_diff = DR_avg_Team1 - DR_avg_Team2,
DR_opp_diff = DR_avg_opp_Team2 - DR_avg_opp_Team1,
TR_diff = TR_avg_Team1 - TR_avg_Team2,
TR_opp_diff = TR_avg_opp_Team2 - TR_avg_opp_Team1,
TR_diff_diff = TR_avg_diff_Team1 - TR_avg_diff_Team2,
OR_percent_diff = OR_percent_Team1 - OR_percent_Team2,
AST_diff = AST_avg_Team1 - AST_avg_Team2,
AST_opp_diff = AST_avg_opp_Team2 - AST_avg_opp_Team1,
TO_diff = TO_avg_Team2 - TO_avg_Team1,
TO_opp_diff = TO_avg_opp_Team2 - TO_avg_opp_Team1,
AST_to_TO_diff = AST_to_TO_Team1 - AST_to_TO_Team2,
AST_to_SCORE_diff = AST_to_SCORE_Team1 - AST_to_SCORE_Team2,
STL_diff = STL_avg_Team1 - STL_avg_Team2,
STL_to_TO_diff = STL_to_TO_Team1 - STL_to_TO_Team2,
BLK_diff = BLK_avg_Team1 - BLK_avg_Team2,
PF_diff = PF_avg_Team2 - PF_avg_Team1,
PF_opp_diff = PF_avg_opp_Team1 - PF_avg_opp_Team2,
EFF_diff = EFF_Team1 - EFF_Team2,
Win_close_diff = Winning_percent_close_Team1 - Winning_percent_close_Team2,
TSP_diff = TSP_avg_Team1 - TSP_avg_Team2,
EFGP_diff = EFGP_avg_Team1 - EFGP_avg_Team2,
FTA_to_FGA_diff = FTA_to_FGA_avg_Team1 - FTA_to_FGA_avg_Team2,
BLK_to_PF_diff = BLK_to_PF_avg_Team1 - BLK_to_PF_avg_Team2,
D_to_PF_diff = D_to_PF_avg_Team1 - D_to_PF_avg_Team2,
Win_score_diff = Win_score_avg_Team1 - Win_score_avg_Team2,
Game_score_diff = Game_score_avg_Team1 - Game_score_avg_Team2,
Score_3_percent_diff = Score_3_percent_avg_Team1 - Score_3_percent_avg_Team2,
OE_diff = OE_avg_Team1 - OE_avg_Team2,
Score_to_Poss_diff = Score_to_Poss_avg_Team1 - Score_to_Poss_avg_Team2,
EOP_diff = EOP_avg_Team1 - EOP_avg_Team2
)
View(Tournament_modeling)
colSums(is.na(Tournament_modeling))
write.csv(Tournament_modeling,"Intermediate Data/Modeling_tournament.csv",row.names = F)
rm(list=ls())
gc()
mod_varImp_list = c(
"Seed_Diff",
"Seed_num_Team1",
"Score_avg_diff_diff",
"Win_score_diff",
"Score_avg_diff_Team1",
"Winning_percent_diff",
"Games_won_Team1",
"Seed_num_Team2",
"Game_score_diff",
"Score_to_Poss_diff",
"OE_diff",
"Winning_percent_Team1",
"Seed_Pre_Team1",
"EFF_diff",
"Away_won_prob_diff",
"D_to_PF_diff",
"Score_avg_diff_Team2",
"AST_to_TO_diff",
"BLK_to_PF_diff",
"Home_won_prob_diff",
"D_to_PF_avg_Team1",
"Score_to_Poss_avg_Team2",
"PF_avg_Team1",
"STL_to_TO_diff",
"TR_avg_diff_Team2",
"FGP3_opp_diff",
"FGP3_opp_Team1",
"FTA_to_FGA_diff",
"Win_close_diff",
"AST_to_SCORE_Team1",
"AST_to_SCORE_diff",
"FTP_Team2",
"FTP_diff_diff",
"OR_opp_diff",
"FTP_diff",
"PF_opp_diff",
"AST_to_SCORE_Team2",
"Winning_percent_close_Team2"
)
# With Elo Rating
library(PlayerRatings)
Regular = read.csv("Raw Data/RegularSeasonDetailedResults.csv")
Regular$ID_SeasonTeam1 = paste(Regular$Season,"_",Regular$Wteam,sep="")
Regular$ID_SeasonTeam2 = paste(Regular$Season,"_",Regular$Lteam,sep="")
Regular$Result_num = 1
Elo = Regular[,names(Regular) %in% c("Daynum","ID_SeasonTeam1","ID_SeasonTeam2","Result_num")]
Elo$ID_SeasonTeam1 = as.character(Elo$ID_SeasonTeam1)
Elo$ID_SeasonTeam2 = as.character(Elo$ID_SeasonTeam2)
Elo_all = elo(Elo)
Elo_all = as.data.frame(Elo_all$ratings)
Elo_all$Win_percent = Elo_all$Win/Elo_all$Games
cor(Elo_all$Win_percent,Elo_all$Rating)
write.csv(Elo_all,"Intermediate Data/Elo_rating.csv")
Tournament_modeling = read.csv("Intermediate Data/Modeling_tournament.csv")
Tournament_modeling$Result_num = ifelse(Tournament_modeling$Result=="Win",1,0)
Tournament_modeling = merge(Tournament_modeling,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Tournament_modeling = merge(Tournament_modeling,Elo_all,by.x="ID_SeasonTeam2",by.y="Player",all.x=T)
Tournament_modeling = Tournament_modeling[,names(Tournament_modeling) %in% mod_varImp_list |
names(Tournament_modeling) %in% c("Result","Result_num","Season",
"Rating.x","Rating.y")]
Tournament_modeling$Rating_diff = Tournament_modeling$Rating.x - Tournament_modeling$Rating.y
Tournament_allvars_trn = Tournament_modeling[Tournament_modeling$Season<2013,]
Tournament_allvars_val = Tournament_modeling[Tournament_modeling$Season>=2013,]
Tournament_allvars_trn = subset(Tournament_allvars_trn,
select=-c(Result,Season))
Tournament_allvars_val = subset(Tournament_allvars_val,
select=-c(Result,Season))
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
xgb <- xgboost(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_trn[,-39]),
label = Tournament_allvars_trn$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
xgb
summary(xgb)
View(Tournament_allvars_val)
y_pred <- predict(xgb, data.matrix(Tournament_allvars_val[,-39]))
mean(y_pred)
y_pred_class <- ifelse(y_pred>0.5,1,0)
confusionMatrix(y_pred_class,Tournament_allvars_val$Result_num,positive="1")
Tournament_pred = prediction(y_pred,Tournament_allvars_val$Result_num)
Tournament_roc = performance(Tournament_pred,measure="tpr",x.measure="fpr")
plot(Tournament_roc,main="ROC Curve",lwd=3,col="light blue")
abline(0,1,lty=2,col="red")
Tournament_auc = performance(Tournament_pred,measure="auc")
unlist(Tournament_auc@y.values) # 0.756
Tournament_allvars_final = subset(Tournament_modeling,
select=-c(Season,Result))
xgb <- xgboost(data = data.matrix(Tournament_allvars_final[,-39]),
label = Tournament_allvars_final$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic"
)
xgb_cv <- xgb.cv(data = data.matrix(Tournament_allvars_final[,-39]),
label = Tournament_allvars_final$Result_num,
eta = 0.1,
max_depth = 15,
nround=50,
objective = "binary:logistic",
nfold = 5
)
Test_Full = read.csv("Intermediate Data/Test_Full.csv")
Elo_all = read.csv("Elo_rating.csv")
Test_Full = merge(Test_Full,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Elo_all = read.csv("Intermediate Data/Elo_rating.csv")
Test_Full = merge(Test_Full,Elo_all,by.x="ID_SeasonTeam1",by.y="Player",all.x=T)
Test_Full = merge(Test_Full,Elo_all,by.x="ID_SeasonTeam2",by.y="Player",all.x=T)
Test_Full$Rating_diff = Test_Full$Rating.x - Test_Full$Rating.y
Test_Top = Test_Full[,names(Test_Full) %in% names(Tournament_allvars_trn)]
xgb_pred = predict(xgb,newdata = data.matrix(Test_Top))
Pred_Tournament_Top = data.frame(id=Test_Full$id,pred=xgb_pred)
write.csv(Pred_Tournament_Top,"Pred_Tournament_Top_xgb_Elo.csv",row.names = F)
17617/77549
